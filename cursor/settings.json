// cmd shift p - preferences: open user settings (json) based on https://github.com/nexxeln/dots/blob/main/Library/Application%20Support/Code%20-%20Insiders/User/settings.json

/* {
    "security.promptForLocalFileProtocolHandling": false,
    "workbench.colorTheme": "Visual Studio Light",
    "workbench.preferredHighContrastColorTheme": "Default Dark+",
    "workbench.iconTheme": "vs-minimal",
    "workbench.preferredHighContrastLightColorTheme": "Default Dark+",
    "workbench.preferredLightColorTheme": "Default Dark+",
    "window.autoDetectColorScheme": true,
    "git.autofetch": true,
    "diffEditor.hideUnchangedRegions.enabled": true,
    "diffEditor.ignoreTrimWhitespace": false,
    "diffEditor.renderSideBySide": false,
    "supermaven.enable": {
        "*": false
    },
    "diffEditor.experimental.showMoves": true
}
    */

{
	// vscode meta stuff
	"workbench.startupEditor": "none",
	"editor.accessibilitySupport": "off",

	// text editing stuff
	"editor.formatOnSave": true,
	"editor.defaultFormatter": "esbenp.prettier-vscode",
	"editor.linkedEditing": true,
	"editor.inlineSuggest.enabled": true,
	"editor.unicodeHighlight.nonBasicASCII": false,

	// ui stuff
	//    font
	"editor.fontFamily": "Dank Mono",
	"editor.fontSize": 16,
	"editor.lineHeight": 1.42857, // makes font size 14 have line height of ~20px
	"apc.font.family": "Geist Mono", // apply font to ALL the UI, requires APC extension

	//   cursor
	"editor.cursorBlinking": "smooth", // smol cursor animation, looks nice
	"editor.cursorSmoothCaretAnimation": "on", // move cursor smoothly

	//    window
	//     title bar
	"window.title": "${dirty}${rootName}${separator}${activeEditorShort}",
	"vim.leader": "<space>",
	"vim.normalModeKeyBindings": [
		{
			"before": ["<c-]>"],
			"commands": ["editor.action.marker.next"]
		},
		{
			"before": ["<c-[>"],
			"commands": ["editor.action.marker.prev"]
		},
		{
			"after": ["g", "g", "V", "G"],
			"before": ["<c-a>"]
		},
		{
			"before": ["K"],
			"commands": ["editor.action.showHover"]
		},
		{
			"before": ["leader", "q"],
			"commands": ["editor.action.quickFix"]
		},
		{
			"before": ["leader", "s"],
			"commands": ["bennycode.sort-everything.sortFile"]
		},
		{
			"before": ["leader", "f"],
			"commands": ["workbench.action.quickOpen"]
		}
	],

	//     top bar
	"workbench.editor.showTabs": true, // hide tabs
	"breadcrumbs.enabled": false, // hides breadcrumb path at top of window
	"window.commandCenter": false, // hides command center at the top of the window. Use cmd+shift+p instead
	"workbench.layoutControl.enabled": false, // hides those little squares on the top right of the window
	"workbench.editor.editorActionsLocation": "hidden", // hides the "format" and ellipsis buttons on the top right of the window

	//     minimap
	"editor.minimap.renderCharacters": false, // make minimap blockish (low level of detail)
	"editor.hideCursorInOverviewRuler": true, // don't highlight current line in scrollbar
	"editor.minimap.autohide": true, // shows minimap only on hover

	//     sidebar
	"workbench.activityBar.location": "hidden", // hide sidebar icons, use cmd+b to toggle open
	"workbench.sideBar.location": "right", // puts sidebar on the right, less disruptive (doesn't shift code if text wrap is disabled) when opening with cmd+b

	//     bottom bar
	"workbench.statusBar.visible": false, // hide bottom bar

	//     editor
	"editor.stickyScroll.enabled": true, // keep block name fixed at top when scrolling
	"gitlens.mode.active": "zen", // toggle with command palette, zen mode hides gitlens stuff for when you don't need it
	"editor.wordWrap": "on", // wrap text instead of scrolling horizontally

	//   Theme
	"workbench.iconTheme": "chalice-icon-theme",
	"workbench.colorTheme": "Catppuccin Dark Theme",
	//     Overrides vesper theme start
	"workbench.colorCustomizations": {
		"editorGutter.addedBackground": "#A0A0A0",
		"editorGutter.deletedBackground": "#A0A0A0",
		"editorGutter.modifiedBackground": "#A0A0A0"
	},
	"editor.semanticTokenColorCustomizations": {
		"enabled": true,
		"rules": {
			"type": "#8FBCBB" // nord7
		}
	},
	"editor.tokenColorCustomizations": {
		"textMateRules": [
			{
				"name": "Type parameters",
				"scope": ["entity.name.type.parameter", "variable.type.declaration"],
				"settings": {
					"foreground": "#8FBCBB" // nord7
				}
			},
			{
				"name": "TypeScript primitive types",
				"scope": ["support.type.primitive.tsx", "support.type.primitive.ts"],
				"settings": {
					"foreground": "#8FBCBB" // nord7
				}
			},
			{
				"name": "Constants and readonly variables",
				"scope": ["variable.other.constant.object.tsx", "variable.other.constant"],
				"settings": {
					"foreground": "#8FBCBB" // nord7
				}
			},
			{
				"name": "Function keyword",
				"scope": ["storage.type.function.tsx", "storage.type.function.ts"],
				"settings": {
					"foreground": "#7e92c5" // nord4: light grey
				}
			},
			{
				"name": "Variables",
				"scope": ["variable.other"],
				"settings": {
					"foreground": "#7e92c5" // nord4: for variables like debouncedValue
				}
			},
			{
				"name": "Class keyword",
				"scope": ["storage.type.class.tsx", "storage.type.class.ts"],
				"settings": {
					"foreground": "#c1c1c1" // nord4: light grey
				}
			},
			{
				"name": "Constants",
				"scope": ["storage.type.tsx"],
				"settings": {
					"foreground": "#7e92c5" // nord4: for constants like PI
				}
			},
			{
				"name": "Control flow keywords",
				"scope": [
					"keyword.control.flow.tsx",
					"keyword.control.flow.ts",
					"keyword.control.import.tsx",
					"keyword.control.import.ts",
					"keyword.control.from.tsx",
					"keyword.control.from.ts",
					"storage.modifier.tsx",
					"storage.modifier.ts",
					"storage.type.type.tsx",
					"storage.type.type.ts",
					"variable.language.this",
					"variable.language.super",
					"variable.language.static",
					"variable.language.private",
					"variable.language.protected",
					"variable.language.public",
					"variable.language.static",
					"variable.language.private",
					"punctuation.definition.block.tsx",
					"punctuation.definition.block.ts",
					"punctuation.definition.parameters.start.tsx",
					"punctuation.definition.parameters.start.ts",
					"punctuation.definition.parameters.end.tsx",
					"punctuation.definition.parameters.end.ts"
				],
				"settings": {
					"foreground": "#7e92c5" // nord4: for control flow keywords
				}
			},
			{
				"name": "Function names",
				"scope": ["entity.name.function.tsx", "entity.name.function.ts"],
				"settings": {
					"foreground": "#c8c8c8" // nord4: for function names
				}
			}
		]
	},
	//     Overrides vesper theme end

	// git stuff
	"git.openRepositoryInParentFolders": "always",
	"git.autofetch": true,
	"git.confirmNoVerifyCommit": false,
	"git.confirmSync": false,
	"git.ignoreMissingGitWarning": true,
	"gitlens.gitCommands.skipConfirmations": [
		"fetch:command",
		"stash-push:command",
		"switch:command",
		"push:command"
	],
	"gitlens.hovers.currentLine.over": "line",

	// js tooling stuff
	"typescript.preferences.importModuleSpecifier": "non-relative", // prefer aliases when importing
	"eslint.options": {
		"extensions": [".js", ".jsx", ".mdx", ".ts", ".tsx"]
	},
	"eslint.validate": ["mdx", "javascript", "javascriptreact", "typescript", "typescriptreact"],
	"tailwindCSS.experimental.classRegex": [
		// enables tailwind autocomplete for specified functions
		["cva\\(([^)]*)\\)", "[\"'`]([^\"'`]*).*?[\"'`]"],
		["cn\\(([^)]*)\\)", "[\"'`]([^\"'`]*).*?[\"'`]"],
		["cx\\(([^)]*)\\)", "[\"'`]([^\"'`]*).*?[\"'`]"]
	],
	"[c]": {
		"editor.defaultFormatter": "ms-vscode.cpptools"
	},
	"git.enableSmartCommit": true
}
